{"mappings":"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","sources":["<anon>","src/script.js","src/utils/voicerss.ts"],"sourcesContent":["(function () {\n// VoiceRSS Javascript SDK\nconst $3762ceed473a0440$export$f93563f1d43da462 = {\n    // Call validation and request functions with the settings object\n    speech: function(e) {\n        this._validate(e), this._request(e);\n    },\n    // Validation function to check if the settings object has the required properties\n    _validate: function(e) {\n        if (!e) throw \"The settings are undefined\";\n        if (!e.key) throw \"The API key is undefined\";\n        if (!e.src) throw \"The text is undefined\";\n        if (!e.hl) throw \"The language is undefined\";\n        // If the audio codec is not set to auto, check if the browser supports the codec\n        if (e.c && \"auto\" != e.c.toLowerCase()) {\n            var a = !1;\n            switch(e.c.toLowerCase()){\n                case \"mp3\":\n                    a = (new Audio).canPlayType(\"audio/mpeg\");\n                    break;\n                case \"wav\":\n                    a = (new Audio).canPlayType(\"audio/wav\");\n                    break;\n                case \"aac\":\n                    a = (new Audio).canPlayType(\"audio/aac\");\n                    break;\n                case \"ogg\":\n                    a = (new Audio).canPlayType(\"audio/ogg\");\n                    break;\n                case \"caf\":\n                    a = (new Audio).canPlayType(\"audio/x-caf\");\n            }\n            if (!a) throw \"The browser does not support the audio codec \" + e.c;\n        }\n    },\n    _request: async function(e) {\n        try {\n            const response = await fetch(\"https://api.voicerss.org/\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n                },\n                body: this._buildRequest(e)\n            });\n            if (response.ok) {\n                const result = await response.text();\n                if (e.audioElement instanceof HTMLAudioElement) {\n                    e.audioElement.src = result;\n                    e.audioElement.play();\n                } else throw \"audioElement must be an instance of HTMLAudioElement\";\n            } else {\n                const error = await response.text();\n                throw error;\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    },\n    // Build the request string\n    _buildRequest: function(e) {\n        // If there is a codec in the settings object, set the codec to the value of the codec, otherwise call the detectCodec function\n        var a = e.c && \"auto\" != e.c.toLowerCase() ? e.c : this._detectCodec();\n        // Return the request string with the key, text, language, rate, codec, format, and ssml\n        return `key=${e.key || \"\"}&src=${e.src || \"\"}&hl=${e.hl || \"\"}&r=${e.r || \"\"}&c=${a || \"\"}&f=${e.f || \"\"}&ssml=${e.ssml || \"\"}&b64=true`;\n    },\n    // Detect the audio codec supported by the browser\n    _detectCodec: function() {\n        // Create an audio element\n        var e = new Audio;\n        // Check if the browser supports the audio codecs and return the codec\n        return e.canPlayType(\"audio/mpeg\") ? \"mp3\" : e.canPlayType(\"audio/wav\") ? \"wav\" : e.canPlayType(\"audio/aac\") ? \"aac\" : e.canPlayType(\"audio/ogg\") ? \"ogg\" : e.canPlayType(\"audio/x-caf\") ? \"caf\" : \"\";\n    },\n    // Try to create an instance of the XMLHttpRequest object, if it fails, try to create an instance of the ActiveXObject object with the specified versions\n    _getXHR: function() {\n        try {\n            // Works in modern browsers\n            return new XMLHttpRequest;\n        } catch (e) {}\n        try {\n            // Works in IE7 and IE8\n            return new ActiveXObject(\"Msxml3.XMLHTTP\");\n        } catch (e) {}\n        try {\n            // Works in IE6\n            return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\");\n        } catch (e) {}\n        try {\n            //Works in IE5\n            return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\");\n        } catch (e) {}\n        try {\n            // Works in Firefox, Opera and Chrome\n            return new ActiveXObject(\"Msxml2.XMLHTTP\");\n        } catch (e) {}\n        try {\n            // For everything else, return a standard HTTP request\n            return new ActiveXObject(\"Microsoft.XMLHTTP\");\n        } catch (e) {}\n        throw \"The browser does not support HTTP request\";\n    }\n};\n\n\nconst $81cdcb03b6ee87e9$var$button = document.getElementById(\"button\");\nconst $81cdcb03b6ee87e9$var$audioElement = document.getElementById(\"audio\");\nconst $81cdcb03b6ee87e9$var$nsfwSwitch = document.getElementById(\"settings-nsfw__input\");\nconst $81cdcb03b6ee87e9$var$nsfwModeButton = document.getElementById(\"nsfw-dark\");\nconst $81cdcb03b6ee87e9$var$customCheckboxes = Array.from(document.getElementsByClassName(\"checkbox-container\"));\n//* User Settings\nlet $81cdcb03b6ee87e9$var$userCategories = [];\nlet $81cdcb03b6ee87e9$var$nsfwMode = false;\n// Append nsfw string to API URL to filter out nsfw jokes by default\nlet $81cdcb03b6ee87e9$var$nsfwString = \"?blacklistFlags=nsfw,religious,political,racist,sexist,explicit\";\n// Hide 'dark' category option by default\ndocument.getElementById(\"nsfw-dark\").style.display = \"none\";\n// Get jokes from Joke API\nasync function $81cdcb03b6ee87e9$var$getJoke() {\n    $81cdcb03b6ee87e9$var$getUserCategories();\n    const apiUrl = `https://v2.jokeapi.dev/joke/${$81cdcb03b6ee87e9$var$userCategories}${$81cdcb03b6ee87e9$var$nsfwString}`;\n    console.log(apiUrl);\n    try {\n        const response = await fetch(apiUrl);\n        const data = await response.json();\n        // check if joke is single or double and set joke string accordingly\n        const joke = data.joke ? data.joke : data.setup + \"...\" + data.delivery;\n        // Text-to-Speech function\n        $81cdcb03b6ee87e9$var$playAudio(joke);\n    } catch (error) {\n        // catch error here\n        console.error(\"Error fetching jokes -\", error);\n    }\n}\n// Passing joke string to VoiceRSS TTS as src parameter and audioElement for playing audio\nfunction $81cdcb03b6ee87e9$var$playAudio(userString) {\n    (0, $3762ceed473a0440$export$f93563f1d43da462).speech({\n        key: \"f83cf3c984414c67b2a8240b169e56c2\",\n        src: userString,\n        hl: \"en-us\",\n        r: \"0\",\n        c: \"mp3\",\n        f: \"44khz_16bit_stereo\",\n        ssml: \"false\",\n        audioElement: $81cdcb03b6ee87e9$var$audioElement\n    });\n}\nfunction $81cdcb03b6ee87e9$var$getUserCategories() {\n    // Clear userCategories array\n    $81cdcb03b6ee87e9$var$userCategories = [];\n    // Add user selected categories to userCategories array\n    $81cdcb03b6ee87e9$var$customCheckboxes.forEach((checkbox)=>{\n        if (checkbox.childNodes[1].checked) $81cdcb03b6ee87e9$var$userCategories.push(checkbox.childNodes[0].textContent.trimEnd());\n    });\n    // If user selected 'All' or no categories, set userCategories to 'Any'\n    if ($81cdcb03b6ee87e9$var$userCategories.length === 0 || $81cdcb03b6ee87e9$var$userCategories[0] === \"All\") $81cdcb03b6ee87e9$var$userCategories = [\n        \"Any\"\n    ];\n    else $81cdcb03b6ee87e9$var$userCategories = $81cdcb03b6ee87e9$var$userCategories.filter((category)=>category !== \"All\");\n    // Join userCategories array into a string\n    $81cdcb03b6ee87e9$var$userCategories.join(\",\");\n    console.log($81cdcb03b6ee87e9$var$userCategories);\n}\n// Event listeners\n$81cdcb03b6ee87e9$var$button.addEventListener(\"click\", $81cdcb03b6ee87e9$var$getJoke);\n// Toggle nsfw mode\n$81cdcb03b6ee87e9$var$nsfwSwitch.addEventListener(\"change\", ()=>{\n    $81cdcb03b6ee87e9$var$nsfwMode = $81cdcb03b6ee87e9$var$nsfwSwitch.checked;\n    if ($81cdcb03b6ee87e9$var$nsfwMode) {\n        $81cdcb03b6ee87e9$var$nsfwString = \"\";\n        $81cdcb03b6ee87e9$var$nsfwModeButton.style.display = \"block\";\n    } else {\n        $81cdcb03b6ee87e9$var$nsfwString = \"?blacklistFlags=nsfw,religious,political,racist,sexist,explicit\";\n        $81cdcb03b6ee87e9$var$nsfwModeButton.style.display = \"none\";\n        $81cdcb03b6ee87e9$var$nsfwModeButton.childNodes[1].checked = false;\n    }\n});\n// Disable the All checkbox if any other checkbox is checked\n$81cdcb03b6ee87e9$var$customCheckboxes.forEach((checkbox)=>{\n    checkbox.addEventListener(\"change\", ()=>{\n        if (checkbox.childNodes[1].id === \"all-checkbox\") return;\n        else document.getElementById(\"all-checkbox\").checked = false;\n    });\n});\n// Toggle all checkboxes on or off when the All checkbox is checked\ndocument.getElementById(\"all-checkbox\").addEventListener(\"change\", ()=>{\n    if (document.getElementById(\"all-checkbox\").checked) $81cdcb03b6ee87e9$var$customCheckboxes.filter((checkbox)=>$81cdcb03b6ee87e9$var$nsfwMode ? checkbox : checkbox.id !== \"nsfw-dark\").forEach((checkbox)=>checkbox.childNodes[1].checked = true);\n    else $81cdcb03b6ee87e9$var$customCheckboxes.forEach((checkbox)=>checkbox.childNodes[1].checked = false);\n});\n\n})();\n//# sourceMappingURL=index.128f02c9.js.map\n","import { VoiceRSS } from './utils/voicerss.ts'\n\nconst button = document.getElementById(\"button\");\nconst audioElement = document.getElementById(\"audio\");\nconst nsfwSwitch = document.getElementById(\"settings-nsfw__input\");\nconst nsfwModeButton = document.getElementById('nsfw-dark');\nconst customCheckboxes = Array.from(document.getElementsByClassName('checkbox-container'))\n\n//* User Settings\nlet userCategories = []; \nlet nsfwMode = false;\n// Append nsfw string to API URL to filter out nsfw jokes by default\nlet nsfwString = \"?blacklistFlags=nsfw,religious,political,racist,sexist,explicit\";\n// Hide 'dark' category option by default\ndocument.getElementById('nsfw-dark').style.display = 'none'\n\n\n// Get jokes from Joke API\nasync function getJoke() {\n  getUserCategories();\n\n  const apiUrl = `https://v2.jokeapi.dev/joke/${userCategories}${nsfwString}`;\n  console.log(apiUrl);\n  try {\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n\n    // check if joke is single or double and set joke string accordingly\n    const joke = data.joke ? data.joke : data.setup + '...' + data.delivery;\n\n    // Text-to-Speech function\n    playAudio(joke);\n\n  } catch (error) {\n    // catch error here\n    console.error('Error fetching jokes -', error);\n  }\n}\n\n// Passing joke string to VoiceRSS TTS as src parameter and audioElement for playing audio\nfunction playAudio(userString) {\n      VoiceRSS.speech({\n      key: 'f83cf3c984414c67b2a8240b169e56c2',\n      src: userString,\n      hl: \"en-us\",\n      r: \"0\",\n      c: \"mp3\",\n      f: \"44khz_16bit_stereo\",\n      ssml: 'false',\n      audioElement\n    });\n}\n\nfunction getUserCategories() {\n  // Clear userCategories array\n  userCategories = [];\n\n  // Add user selected categories to userCategories array\n  customCheckboxes.forEach(checkbox => {\n    if (checkbox.childNodes[1].checked) {\n      userCategories.push(checkbox.childNodes[0].textContent.trimEnd());\n    }\n  })\n\n  // If user selected 'All' or no categories, set userCategories to 'Any'\n  if (userCategories.length === 0 || userCategories[0] === 'All') {\n    userCategories = ['Any'];\n  } else {\n    userCategories = userCategories.filter(category => category !== 'All');\n  }\n\n  // Join userCategories array into a string\n  userCategories.join(',');\n  console.log(userCategories);\n}\n\n// Event listeners\nbutton.addEventListener('click', getJoke);\n\n// Toggle nsfw mode\nnsfwSwitch.addEventListener('change', () => {\n  nsfwMode = nsfwSwitch.checked;\n  if (nsfwMode) {\n    nsfwString = '';\n    nsfwModeButton.style.display = 'block'\n  } else {\n    nsfwString = '?blacklistFlags=nsfw,religious,political,racist,sexist,explicit';\n    nsfwModeButton.style.display = 'none'\n    nsfwModeButton.childNodes[1].checked = false;\n  }\n});\n\n// Disable the All checkbox if any other checkbox is checked\ncustomCheckboxes.forEach(checkbox => {\n  checkbox.addEventListener('change', () => {\n    if (checkbox.childNodes[1].id === 'all-checkbox') {\n      return;\n    } else {\n      document.getElementById('all-checkbox').checked = false;\n    }\n  })\n})\n\n// Toggle all checkboxes on or off when the All checkbox is checked\ndocument.getElementById('all-checkbox').addEventListener('change', () => {\n  if (document.getElementById('all-checkbox').checked) {\n    customCheckboxes.filter(checkbox => nsfwMode ? checkbox : checkbox.id !== 'nsfw-dark').forEach(checkbox => checkbox.childNodes[ 1 ].checked = true);\n  } else {\n    customCheckboxes.forEach(checkbox => checkbox.childNodes[ 1 ].checked = false);\n  }\n})\n\n\n\n","// VoiceRSS Javascript SDK\ninterface Settings {\n  key: string // API key\n  src: string // Text to convert to speech\n  hl: string // Language\n  r: string // Rate from -10 to 10\n  c: string // Audio codec\n  f: string // Audio format\n  ssml: string // speech synthesis flag\n  audioElement?: HTMLElement | HTMLAudioElement // Audio element\n}\n\nexport const VoiceRSS = {\n  // Call validation and request functions with the settings object\n  speech: function (e: Settings) {\n    this._validate(e), this._request(e)\n  },\n  // Validation function to check if the settings object has the required properties\n  _validate: function (e: Settings) {\n    if (!e)\n      throw \"The settings are undefined\";\n    if (!e.key)\n      throw \"The API key is undefined\";\n    if (!e.src)\n      throw \"The text is undefined\";\n    if (!e.hl)\n      throw \"The language is undefined\";\n    // If the audio codec is not set to auto, check if the browser supports the codec\n    if (e.c && \"auto\" != e.c.toLowerCase()) {\n      var a: boolean | string = !1;\n      switch (e.c.toLowerCase()) {\n        case \"mp3\": a = (new Audio).canPlayType(\"audio/mpeg\");\n          break;\n        case \"wav\": a = (new Audio).canPlayType(\"audio/wav\");\n          break;\n        case \"aac\": a = (new Audio).canPlayType(\"audio/aac\");\n          break;\n        case \"ogg\": a = (new Audio).canPlayType(\"audio/ogg\");\n          break;\n        case \"caf\": a = (new Audio).canPlayType(\"audio/x-caf\");\n      }\n      if (!a)\n        throw \"The browser does not support the audio codec \" + e.c\n    }\n  },\n\n  _request: async function (e: Settings) {\n    try {\n      const response = await fetch('https://api.voicerss.org/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n        },\n        body: this._buildRequest(e)\n      })\n\n      if (response.ok) {\n        const result = await response.text()\n        if (e.audioElement instanceof HTMLAudioElement) {\n          e.audioElement.src = result\n          e.audioElement.play()\n        } else throw 'audioElement must be an instance of HTMLAudioElement'\n      } else {\n        const error = await response.text()\n        throw error\n      }\n    } catch(error) {\n      console.log(error)\n    }\n  },\n\n  // Build the request string\n  _buildRequest: function (e: Settings): string {\n    // If there is a codec in the settings object, set the codec to the value of the codec, otherwise call the detectCodec function\n    var a: string = e.c && \"auto\" != e.c.toLowerCase() ? e.c : this._detectCodec();\n    // Return the request string with the key, text, language, rate, codec, format, and ssml\n    return `key=${(e.key || \"\")}&src=${(e.src || \"\")}&hl=${(e.hl || \"\")}&r=${(e.r || \"\")}&c=${(a || \"\")}&f=${(e.f || \"\")}&ssml=${(e.ssml || \"\")}&b64=true`\n  },\n  // Detect the audio codec supported by the browser\n  _detectCodec: function (): string {\n    // Create an audio element\n    var e: HTMLAudioElement = new Audio;\n    // Check if the browser supports the audio codecs and return the codec\n    return(\n      e.canPlayType(\"audio/mpeg\") ? \"mp3\"\n      : e.canPlayType(\"audio/wav\") ? \"wav\"\n      : e.canPlayType(\"audio/aac\") ? \"aac\"\n      : e.canPlayType(\"audio/ogg\") ? \"ogg\"\n      : e.canPlayType(\"audio/x-caf\") ? \"caf\"\n      : \"\"\n    )\n  },\n  // Try to create an instance of the XMLHttpRequest object, if it fails, try to create an instance of the ActiveXObject object with the specified versions\n  _getXHR: function (): ActiveXObject | XMLHttpRequest {\n    try {\n      // Works in modern browsers\n      return new XMLHttpRequest\n    } catch (e) {\n\n    } try {\n      // Works in IE7 and IE8\n      return new ActiveXObject(\"Msxml3.XMLHTTP\")\n    } catch (e) {\n\n    } try {\n      // Works in IE6\n      return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\")\n    } catch (e) {\n\n    } try {\n      //Works in IE5\n      return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\")\n    } catch (e) {\n\n    } try {\n      // Works in Firefox, Opera and Chrome\n      return new ActiveXObject(\"Msxml2.XMLHTTP\")\n    } catch (e) {\n\n    } try {\n      // For everything else, return a standard HTTP request\n      return new ActiveXObject(\"Microsoft.XMLHTTP\")\n    } catch (e) {\n      \n     } throw \"The browser does not support HTTP request\"\n  }\n};\n\n\n"],"names":["$3762ceed473a0440$export$f93563f1d43da462","speech","e","_validate","_request","key","src","hl","c","toLowerCase","a","Audio","canPlayType","response","fetch","method","headers","body","_buildRequest","ok","result","text","audioElement","HTMLAudioElement","play","error","console","log","_detectCodec","r","f","ssml","_getXHR","XMLHttpRequest","ActiveXObject","$81cdcb03b6ee87e9$var$button","document","getElementById","$81cdcb03b6ee87e9$var$audioElement","$81cdcb03b6ee87e9$var$nsfwSwitch","$81cdcb03b6ee87e9$var$nsfwModeButton","$81cdcb03b6ee87e9$var$customCheckboxes","Array","from","getElementsByClassName","$81cdcb03b6ee87e9$var$userCategories","$81cdcb03b6ee87e9$var$nsfwMode","$81cdcb03b6ee87e9$var$nsfwString","$81cdcb03b6ee87e9$var$getJoke","forEach","checkbox","childNodes","checked","push","textContent","trimEnd","length","filter","category","join","apiUrl","userString","data","json","joke","setup","delivery","style","display","addEventListener","id"],"version":3,"file":"index.128f02c9.js.map"}